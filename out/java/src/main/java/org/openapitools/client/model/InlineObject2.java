/*
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InlineObject2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-06-07T17:49:18.134057Z[Etc/UTC]")
public class InlineObject2 {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Integer value;

  /**
   * Gets or Sets variation
   */
  @JsonAdapter(VariationEnum.Adapter.class)
  public enum VariationEnum {
    GSB("gsb"),
    
    ERZEUGUNG("erzeugung"),
    
    EIGENSTROM("eigenstrom"),
    
    CO2("co2"),
    
    BAEUME("baeume");

    private String value;

    VariationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VariationEnum fromValue(String value) {
      for (VariationEnum b : VariationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VariationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VariationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VariationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VariationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VARIATION = "variation";
  @SerializedName(SERIALIZED_NAME_VARIATION)
  private VariationEnum variation;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;


  public InlineObject2 account(String account) {
    
    this.account = account;
    return this;
  }

   /**
   * Stromkonto account address of sender
   * @return account
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Stromkonto account address of sender")

  public String getAccount() {
    return account;
  }


  public void setAccount(String account) {
    this.account = account;
  }


  public InlineObject2 to(String to) {
    
    this.to = to;
    return this;
  }

   /**
   * Stromkonto account address of reciever
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Stromkonto account address of reciever")

  public String getTo() {
    return to;
  }


  public void setTo(String to) {
    this.to = to;
  }


  public InlineObject2 value(Integer value) {
    
    this.value = value;
    return this;
  }

   /**
   * Amount to transfer (in Watthours for electricity, or pcs for trees)
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount to transfer (in Watthours for electricity, or pcs for trees)")

  public Integer getValue() {
    return value;
  }


  public void setValue(Integer value) {
    this.value = value;
  }


  public InlineObject2 variation(VariationEnum variation) {
    
    this.variation = variation;
    return this;
  }

   /**
   * Get variation
   * @return variation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VariationEnum getVariation() {
    return variation;
  }


  public void setVariation(VariationEnum variation) {
    this.variation = variation;
  }


  public InlineObject2 signature(String signature) {
    
    this.signature = signature;
    return this;
  }

   /**
   * Signature per Stromkonto setting (might be simple email confirmation link)
   * @return signature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Signature per Stromkonto setting (might be simple email confirmation link)")

  public String getSignature() {
    return signature;
  }


  public void setSignature(String signature) {
    this.signature = signature;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject2 inlineObject2 = (InlineObject2) o;
    return Objects.equals(this.account, inlineObject2.account) &&
        Objects.equals(this.to, inlineObject2.to) &&
        Objects.equals(this.value, inlineObject2.value) &&
        Objects.equals(this.variation, inlineObject2.variation) &&
        Objects.equals(this.signature, inlineObject2.signature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, to, value, variation, signature);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject2 {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    variation: ").append(toIndentedString(variation)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

