/*
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Ommeters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-06-07T17:52:38.075125Z[Etc/UTC]")
public class Ommeters {
  public static final String SERIALIZED_NAME_METER_ID = "meterId";
  @SerializedName(SERIALIZED_NAME_METER_ID)
  private String meterId;

  public static final String SERIALIZED_NAME_MANUFACTURER_ID = "manufacturerId";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER_ID)
  private String manufacturerId;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_MEASUREMENT_TYPE = "measurementType";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_TYPE)
  private String measurementType;

  public static final String SERIALIZED_NAME_LOAD_PROFILE_TYPE = "loadProfileType";
  @SerializedName(SERIALIZED_NAME_LOAD_PROFILE_TYPE)
  private String loadProfileType;

  public static final String SERIALIZED_NAME_SCALING_FACTOR = "scalingFactor";
  @SerializedName(SERIALIZED_NAME_SCALING_FACTOR)
  private Integer scalingFactor;

  public static final String SERIALIZED_NAME_CURRENT_SCALING_FACTOR = "currentScalingFactor";
  @SerializedName(SERIALIZED_NAME_CURRENT_SCALING_FACTOR)
  private Integer currentScalingFactor;

  public static final String SERIALIZED_NAME_VOLTAGE_SCALING_FACTOR = "voltageScalingFactor";
  @SerializedName(SERIALIZED_NAME_VOLTAGE_SCALING_FACTOR)
  private Integer voltageScalingFactor;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private String meta;


  public Ommeters meterId(String meterId) {
    
    this.meterId = meterId;
    return this;
  }

   /**
   * identifier to be used in other methods like readings or activities.
   * @return meterId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "gAAAAABgsYVSfcCjJZV5w2wGBTzOXCihY7dMaDyypwcbJzAELvxeCDaXiy65H2QwtY-7usSOfoqEIomTJjQb1yyIXZfFnTY2pmLgIu_DVw1rjppFte56yWBD5Fgrmbh2KyOkMNUr8zxO", value = "identifier to be used in other methods like readings or activities.")

  public String getMeterId() {
    return meterId;
  }


  public void setMeterId(String meterId) {
    this.meterId = meterId;
  }


  public Ommeters manufacturerId(String manufacturerId) {
    
    this.manufacturerId = manufacturerId;
    return this;
  }

   /**
   * DLMS manufacturerId
   * @return manufacturerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "DLMS manufacturerId")

  public String getManufacturerId() {
    return manufacturerId;
  }


  public void setManufacturerId(String manufacturerId) {
    this.manufacturerId = manufacturerId;
  }


  public Ommeters location(String location) {
    
    this.location = location;
    return this;
  }

   /**
   * Basic address information for geo coding
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Basic address information for geo coding")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    this.location = location;
  }


  public Ommeters type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Device type of the meter
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Device type of the meter")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public Ommeters measurementType(String measurementType) {
    
    this.measurementType = measurementType;
    return this;
  }

   /**
   * Physical quantity being measured by the meter
   * @return measurementType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Physical quantity being measured by the meter")

  public String getMeasurementType() {
    return measurementType;
  }


  public void setMeasurementType(String measurementType) {
    this.measurementType = measurementType;
  }


  public Ommeters loadProfileType(String loadProfileType) {
    
    this.loadProfileType = loadProfileType;
    return this;
  }

   /**
   * Metering load profile type associated with the meter
   * @return loadProfileType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Metering load profile type associated with the meter")

  public String getLoadProfileType() {
    return loadProfileType;
  }


  public void setLoadProfileType(String loadProfileType) {
    this.loadProfileType = loadProfileType;
  }


  public Ommeters scalingFactor(Integer scalingFactor) {
    
    this.scalingFactor = scalingFactor;
    return this;
  }

   /**
   * Factor imposed on metered current AND voltage by a transducer
   * @return scalingFactor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Factor imposed on metered current AND voltage by a transducer")

  public Integer getScalingFactor() {
    return scalingFactor;
  }


  public void setScalingFactor(Integer scalingFactor) {
    this.scalingFactor = scalingFactor;
  }


  public Ommeters currentScalingFactor(Integer currentScalingFactor) {
    
    this.currentScalingFactor = currentScalingFactor;
    return this;
  }

   /**
   * Factor imposed on metered current by a transducer
   * @return currentScalingFactor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Factor imposed on metered current by a transducer")

  public Integer getCurrentScalingFactor() {
    return currentScalingFactor;
  }


  public void setCurrentScalingFactor(Integer currentScalingFactor) {
    this.currentScalingFactor = currentScalingFactor;
  }


  public Ommeters voltageScalingFactor(Integer voltageScalingFactor) {
    
    this.voltageScalingFactor = voltageScalingFactor;
    return this;
  }

   /**
   * Factor imposed on metered voltage by a transducer
   * @return voltageScalingFactor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Factor imposed on metered voltage by a transducer")

  public Integer getVoltageScalingFactor() {
    return voltageScalingFactor;
  }


  public void setVoltageScalingFactor(Integer voltageScalingFactor) {
    this.voltageScalingFactor = voltageScalingFactor;
  }


  public Ommeters meta(String meta) {
    
    this.meta = meta;
    return this;
  }

   /**
   * Statistical metadata for this household
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Statistical metadata for this household")

  public String getMeta() {
    return meta;
  }


  public void setMeta(String meta) {
    this.meta = meta;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ommeters ommeters = (Ommeters) o;
    return Objects.equals(this.meterId, ommeters.meterId) &&
        Objects.equals(this.manufacturerId, ommeters.manufacturerId) &&
        Objects.equals(this.location, ommeters.location) &&
        Objects.equals(this.type, ommeters.type) &&
        Objects.equals(this.measurementType, ommeters.measurementType) &&
        Objects.equals(this.loadProfileType, ommeters.loadProfileType) &&
        Objects.equals(this.scalingFactor, ommeters.scalingFactor) &&
        Objects.equals(this.currentScalingFactor, ommeters.currentScalingFactor) &&
        Objects.equals(this.voltageScalingFactor, ommeters.voltageScalingFactor) &&
        Objects.equals(this.meta, ommeters.meta);
  }

  @Override
  public int hashCode() {
    return Objects.hash(meterId, manufacturerId, location, type, measurementType, loadProfileType, scalingFactor, currentScalingFactor, voltageScalingFactor, meta);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ommeters {\n");
    sb.append("    meterId: ").append(toIndentedString(meterId)).append("\n");
    sb.append("    manufacturerId: ").append(toIndentedString(manufacturerId)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    measurementType: ").append(toIndentedString(measurementType)).append("\n");
    sb.append("    loadProfileType: ").append(toIndentedString(loadProfileType)).append("\n");
    sb.append("    scalingFactor: ").append(toIndentedString(scalingFactor)).append("\n");
    sb.append("    currentScalingFactor: ").append(toIndentedString(currentScalingFactor)).append("\n");
    sb.append("    voltageScalingFactor: ").append(toIndentedString(voltageScalingFactor)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

