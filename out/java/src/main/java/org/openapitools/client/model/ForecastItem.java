/*
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * ForecastItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-06-10T22:14:05.124306Z[Etc/UTC]")
public class ForecastItem {
  public static final String SERIALIZED_NAME_EPOCHTIME = "epochtime";
  @SerializedName(SERIALIZED_NAME_EPOCHTIME)
  private Integer epochtime;

  public static final String SERIALIZED_NAME_TIME_STAMP = "timeStamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private Integer timeStamp;

  public static final String SERIALIZED_NAME_GSI = "gsi";
  @SerializedName(SERIALIZED_NAME_GSI)
  private Integer gsi;

  public static final String SERIALIZED_NAME_SCALED = "scaled";
  @SerializedName(SERIALIZED_NAME_SCALED)
  private Boolean scaled;

  public static final String SERIALIZED_NAME_SCI = "sci";
  @SerializedName(SERIALIZED_NAME_SCI)
  private Integer sci;

  public static final String SERIALIZED_NAME_ENERGYPRICE = "energyprice";
  @SerializedName(SERIALIZED_NAME_ENERGYPRICE)
  private BigDecimal energyprice;

  public static final String SERIALIZED_NAME_CO2_G_OEKOSTROM = "co2_g_oekostrom";
  @SerializedName(SERIALIZED_NAME_CO2_G_OEKOSTROM)
  private Integer co2GOekostrom;


  public ForecastItem epochtime(Integer epochtime) {
    
    this.epochtime = epochtime;
    return this;
  }

   /**
   * Timestamps in Seconds
   * @return epochtime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1609293600", value = "Timestamps in Seconds")

  public Integer getEpochtime() {
    return epochtime;
  }


  public void setEpochtime(Integer epochtime) {
    this.epochtime = epochtime;
  }


  public ForecastItem timeStamp(Integer timeStamp) {
    
    this.timeStamp = timeStamp;
    return this;
  }

   /**
   * Timestamp in Standard Milliseconds
   * @return timeStamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1609293600000", value = "Timestamp in Standard Milliseconds")

  public Integer getTimeStamp() {
    return timeStamp;
  }


  public void setTimeStamp(Integer timeStamp) {
    this.timeStamp = timeStamp;
  }


  public ForecastItem gsi(Integer gsi) {
    
    this.gsi = gsi;
    return this;
  }

   /**
   * Actual GreenPowerIndex for given Timestamp (between 0-100)
   * @return gsi
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "43", value = "Actual GreenPowerIndex for given Timestamp (between 0-100)")

  public Integer getGsi() {
    return gsi;
  }


  public void setGsi(Integer gsi) {
    this.gsi = gsi;
  }


  public ForecastItem scaled(Boolean scaled) {
    
    this.scaled = scaled;
    return this;
  }

   /**
   * Indicates if scaling is in operation to predict values
   * @return scaled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if scaling is in operation to predict values")

  public Boolean getScaled() {
    return scaled;
  }


  public void setScaled(Boolean scaled) {
    this.scaled = scaled;
  }


  public ForecastItem sci(Integer sci) {
    
    this.sci = sci;
    return this;
  }

   /**
   * Subindex just for Solar Energy
   * @return sci
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "43", value = "Subindex just for Solar Energy")

  public Integer getSci() {
    return sci;
  }


  public void setSci(Integer sci) {
    this.sci = sci;
  }


  public ForecastItem energyprice(BigDecimal energyprice) {
    
    this.energyprice = energyprice;
    return this;
  }

   /**
   * Local/regional energyprice modification (cent per kWh or euro per MWh).
   * @return energyprice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-0.219", value = "Local/regional energyprice modification (cent per kWh or euro per MWh).")

  public BigDecimal getEnergyprice() {
    return energyprice;
  }


  public void setEnergyprice(BigDecimal energyprice) {
    this.energyprice = energyprice;
  }


  public ForecastItem co2GOekostrom(Integer co2GOekostrom) {
    
    this.co2GOekostrom = co2GOekostrom;
    return this;
  }

   /**
   * CO2 footprint in Gramm per kwh (only Green Power)
   * @return co2GOekostrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "23", value = "CO2 footprint in Gramm per kwh (only Green Power)")

  public Integer getCo2GOekostrom() {
    return co2GOekostrom;
  }


  public void setCo2GOekostrom(Integer co2GOekostrom) {
    this.co2GOekostrom = co2GOekostrom;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastItem forecastItem = (ForecastItem) o;
    return Objects.equals(this.epochtime, forecastItem.epochtime) &&
        Objects.equals(this.timeStamp, forecastItem.timeStamp) &&
        Objects.equals(this.gsi, forecastItem.gsi) &&
        Objects.equals(this.scaled, forecastItem.scaled) &&
        Objects.equals(this.sci, forecastItem.sci) &&
        Objects.equals(this.energyprice, forecastItem.energyprice) &&
        Objects.equals(this.co2GOekostrom, forecastItem.co2GOekostrom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(epochtime, timeStamp, gsi, scaled, sci, energyprice, co2GOekostrom);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastItem {\n");
    sb.append("    epochtime: ").append(toIndentedString(epochtime)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("    gsi: ").append(toIndentedString(gsi)).append("\n");
    sb.append("    scaled: ").append(toIndentedString(scaled)).append("\n");
    sb.append("    sci: ").append(toIndentedString(sci)).append("\n");
    sb.append("    energyprice: ").append(toIndentedString(energyprice)).append("\n");
    sb.append("    co2GOekostrom: ").append(toIndentedString(co2GOekostrom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

