/*
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.InlineObject3;
import org.openapitools.client.model.InlineResponse2004;
import org.openapitools.client.model.InlineResponse2005;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MeteringDecoratorApi
 */
@Ignore
public class MeteringDecoratorApiTest {

    private final MeteringDecoratorApi api = new MeteringDecoratorApi();

    
    /**
     * Meter Reading
     *
     * Retrieves a metered reading using account (Stromkonto). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void meteringGetTest() throws ApiException {
        String account = null;
        InlineResponse2004 response = api.meteringGet(account);

        // TODO: test validations
    }
    
    /**
     * Meter Reading
     *
     * Post meter reading and get it decorated. Best practice is to first create a new Stromkonto with the register method and choose a nice secret to protect updates. Now regularly send updates to get readings (consumption) split into green power (1.8.1) and grey power (1.8.2). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void meteringPostTest() throws ApiException {
        InlineObject3 inlineObject3 = null;
        InlineResponse2005 response = api.meteringPost(inlineObject3);

        // TODO: test validations
    }
    
}
