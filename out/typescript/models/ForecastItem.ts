/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

export class ForecastItem {
    /**
    * Timestamps in Seconds
    */
    'epochtime'?: number;
    /**
    * Timestamp in Standard Milliseconds
    */
    'timeStamp'?: number;
    /**
    * Actual GreenPowerIndex for given Timestamp (between 0-100)
    */
    'gsi'?: number;
    /**
    * Indicates if scaling is in operation to predict values
    */
    'scaled'?: boolean;
    /**
    * Subindex just for Solar Energy
    */
    'sci'?: number;
    /**
    * Local/regional energyprice modification (cent per kWh or euro per MWh).
    */
    'energyprice'?: number;
    /**
    * CO2 footprint in Gramm per kwh (only Green Power)
    */
    'co2GOekostrom'?: number;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "epochtime",
            "baseName": "epochtime",
            "type": "number",
            "format": ""
        },
        {
            "name": "timeStamp",
            "baseName": "timeStamp",
            "type": "number",
            "format": ""
        },
        {
            "name": "gsi",
            "baseName": "gsi",
            "type": "number",
            "format": ""
        },
        {
            "name": "scaled",
            "baseName": "scaled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "sci",
            "baseName": "sci",
            "type": "number",
            "format": ""
        },
        {
            "name": "energyprice",
            "baseName": "energyprice",
            "type": "number",
            "format": ""
        },
        {
            "name": "co2GOekostrom",
            "baseName": "co2_g_oekostrom",
            "type": "number",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return ForecastItem.attributeTypeMap;
    }
    
    public constructor() {
    }
}

