/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse2002 from '../model/InlineResponse2002';
import InlineResponse2003 from '../model/InlineResponse2003';

/**
* GreenPowerIndexGrnstromIndex service.
* @module api/GreenPowerIndexGrnstromIndexApi
* @version 2.0.0
*/
export default class GreenPowerIndexGrnstromIndexApi {

    /**
    * Constructs a new GreenPowerIndexGrnstromIndexApi. 
    * @alias module:api/GreenPowerIndexGrnstromIndexApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gsiBesthour operation.
     * @callback module:api/GreenPowerIndexGrnstromIndexApi~gsiBesthourCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get best hour (with most regional green energy) in a given timeframe.
     * Simple Wrapper around the GreenPowerIndex for easy integration into almost any SmartHome system that allows access to a JSON/REST Service This endpoint is designed to indicate if a device should be turned on or off. (Switch state). 
     * @param {Object} opts Optional parameters
     * @param {String} opts.zip Zipcode (Postleitzahl) of a city in Germany.
     * @param {String} opts.key Any valid Stromkonto account (address).
     * @param {Number} opts.timeframe Number of hours to check (default 24 hours from now).
     * @param {Number} opts.hours How many hours in row do you need the device turned on?
     * @param {module:api/GreenPowerIndexGrnstromIndexApi~gsiBesthourCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    gsiBesthour(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'zip': opts['zip'],
        'key': opts['key'],
        'timeframe': opts['timeframe'],
        'hours': opts['hours']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/gsi/bestHour', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gsiDispatch operation.
     * @callback module:api/GreenPowerIndexGrnstromIndexApi~gsiDispatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dispatch (Green Energy Distribution Schedule)
     * Dispatch of green energy has two aspects to consider:   - Availability of gerneration facility (depends on weather and installed capacity)   - Demand of energy Using the green power index (GrünstromIndex) we have received a tool to automate distribution of energy in order to prevent redispatch situations. Doing this alows to opimize resource usage (tactical) and leverage data for investment planning (strategic). 
     * @param {Object} opts Optional parameters
     * @param {String} opts.zip Zipcode (Postleitzahl) of a city in Germany.
     * @param {String} opts.key Any valid Stromkonto account (address).
     * @param {module:api/GreenPowerIndexGrnstromIndexApi~gsiDispatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    gsiDispatch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'zip': opts['zip'],
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/gsi/dispatch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gsiMarketdata operation.
     * @callback module:api/GreenPowerIndexGrnstromIndexApi~gsiMarketdataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marketdata
     * Compatible to awattar (https://api.awattar.de/v1/marketdata) API interface but data comes from GreenPowerIndex instead of EPEXSpot. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.zip Zipcode (Postleitzahl) of a city in Germany.
     * @param {module:api/GreenPowerIndexGrnstromIndexApi~gsiMarketdataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    gsiMarketdata(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'zip': opts['zip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;
      return this.apiClient.callApi(
        '/gsi/marketdata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gsiPrediction operation.
     * @callback module:api/GreenPowerIndexGrnstromIndexApi~gsiPredictionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prediction
     * Retrieval the GreenPowerIndex (GrünstromIndex) for a given city (by zipcode) in Germany. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.zip Zipcode (Postleitzahl) of a city in Germany.
     * @param {String} opts.key Any valid Stromkonto account (address).
     * @param {module:api/GreenPowerIndexGrnstromIndexApi~gsiPredictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    gsiPrediction(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'zip': opts['zip'],
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;
      return this.apiClient.callApi(
        '/gsi/prediction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
