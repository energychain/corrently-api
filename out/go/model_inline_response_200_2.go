/*
 * Corrently.io
 *
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * API version: 2.0.0
 * Contact: dev@stromdao.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2002 struct for InlineResponse2002
type InlineResponse2002 struct {
	// Green Energy Mix prior to dispatch of given city
	Premix *map[string]interface{} `json:"premix,omitempty"`
	// Green Energy Mix after dispatch of given city
	Postmix *map[string]interface{} `json:"postmix,omitempty"`
	// List of current sources of green energy (into requested location)
	DispatchFrom *[]DispatchLocation `json:"dispatch_from,omitempty"`
	// List of current targets of green energy (out of requested location)
	DispatchTarget *[]DispatchLocation `json:"dispatch_target,omitempty"`
	Timeframe *InlineResponse2002Timeframe `json:"timeframe,omitempty"`
	// Averaged geospatial distance in kilometers between energy generation and usage at requested location.
	AvgDistanceKm *float32 `json:"avg_distance_km,omitempty"`
}

// NewInlineResponse2002 instantiates a new InlineResponse2002 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2002() *InlineResponse2002 {
	this := InlineResponse2002{}
	return &this
}

// NewInlineResponse2002WithDefaults instantiates a new InlineResponse2002 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2002WithDefaults() *InlineResponse2002 {
	this := InlineResponse2002{}
	return &this
}

// GetPremix returns the Premix field value if set, zero value otherwise.
func (o *InlineResponse2002) GetPremix() map[string]interface{} {
	if o == nil || o.Premix == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Premix
}

// GetPremixOk returns a tuple with the Premix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2002) GetPremixOk() (*map[string]interface{}, bool) {
	if o == nil || o.Premix == nil {
		return nil, false
	}
	return o.Premix, true
}

// HasPremix returns a boolean if a field has been set.
func (o *InlineResponse2002) HasPremix() bool {
	if o != nil && o.Premix != nil {
		return true
	}

	return false
}

// SetPremix gets a reference to the given map[string]interface{} and assigns it to the Premix field.
func (o *InlineResponse2002) SetPremix(v map[string]interface{}) {
	o.Premix = &v
}

// GetPostmix returns the Postmix field value if set, zero value otherwise.
func (o *InlineResponse2002) GetPostmix() map[string]interface{} {
	if o == nil || o.Postmix == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Postmix
}

// GetPostmixOk returns a tuple with the Postmix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2002) GetPostmixOk() (*map[string]interface{}, bool) {
	if o == nil || o.Postmix == nil {
		return nil, false
	}
	return o.Postmix, true
}

// HasPostmix returns a boolean if a field has been set.
func (o *InlineResponse2002) HasPostmix() bool {
	if o != nil && o.Postmix != nil {
		return true
	}

	return false
}

// SetPostmix gets a reference to the given map[string]interface{} and assigns it to the Postmix field.
func (o *InlineResponse2002) SetPostmix(v map[string]interface{}) {
	o.Postmix = &v
}

// GetDispatchFrom returns the DispatchFrom field value if set, zero value otherwise.
func (o *InlineResponse2002) GetDispatchFrom() []DispatchLocation {
	if o == nil || o.DispatchFrom == nil {
		var ret []DispatchLocation
		return ret
	}
	return *o.DispatchFrom
}

// GetDispatchFromOk returns a tuple with the DispatchFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2002) GetDispatchFromOk() (*[]DispatchLocation, bool) {
	if o == nil || o.DispatchFrom == nil {
		return nil, false
	}
	return o.DispatchFrom, true
}

// HasDispatchFrom returns a boolean if a field has been set.
func (o *InlineResponse2002) HasDispatchFrom() bool {
	if o != nil && o.DispatchFrom != nil {
		return true
	}

	return false
}

// SetDispatchFrom gets a reference to the given []DispatchLocation and assigns it to the DispatchFrom field.
func (o *InlineResponse2002) SetDispatchFrom(v []DispatchLocation) {
	o.DispatchFrom = &v
}

// GetDispatchTarget returns the DispatchTarget field value if set, zero value otherwise.
func (o *InlineResponse2002) GetDispatchTarget() []DispatchLocation {
	if o == nil || o.DispatchTarget == nil {
		var ret []DispatchLocation
		return ret
	}
	return *o.DispatchTarget
}

// GetDispatchTargetOk returns a tuple with the DispatchTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2002) GetDispatchTargetOk() (*[]DispatchLocation, bool) {
	if o == nil || o.DispatchTarget == nil {
		return nil, false
	}
	return o.DispatchTarget, true
}

// HasDispatchTarget returns a boolean if a field has been set.
func (o *InlineResponse2002) HasDispatchTarget() bool {
	if o != nil && o.DispatchTarget != nil {
		return true
	}

	return false
}

// SetDispatchTarget gets a reference to the given []DispatchLocation and assigns it to the DispatchTarget field.
func (o *InlineResponse2002) SetDispatchTarget(v []DispatchLocation) {
	o.DispatchTarget = &v
}

// GetTimeframe returns the Timeframe field value if set, zero value otherwise.
func (o *InlineResponse2002) GetTimeframe() InlineResponse2002Timeframe {
	if o == nil || o.Timeframe == nil {
		var ret InlineResponse2002Timeframe
		return ret
	}
	return *o.Timeframe
}

// GetTimeframeOk returns a tuple with the Timeframe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2002) GetTimeframeOk() (*InlineResponse2002Timeframe, bool) {
	if o == nil || o.Timeframe == nil {
		return nil, false
	}
	return o.Timeframe, true
}

// HasTimeframe returns a boolean if a field has been set.
func (o *InlineResponse2002) HasTimeframe() bool {
	if o != nil && o.Timeframe != nil {
		return true
	}

	return false
}

// SetTimeframe gets a reference to the given InlineResponse2002Timeframe and assigns it to the Timeframe field.
func (o *InlineResponse2002) SetTimeframe(v InlineResponse2002Timeframe) {
	o.Timeframe = &v
}

// GetAvgDistanceKm returns the AvgDistanceKm field value if set, zero value otherwise.
func (o *InlineResponse2002) GetAvgDistanceKm() float32 {
	if o == nil || o.AvgDistanceKm == nil {
		var ret float32
		return ret
	}
	return *o.AvgDistanceKm
}

// GetAvgDistanceKmOk returns a tuple with the AvgDistanceKm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2002) GetAvgDistanceKmOk() (*float32, bool) {
	if o == nil || o.AvgDistanceKm == nil {
		return nil, false
	}
	return o.AvgDistanceKm, true
}

// HasAvgDistanceKm returns a boolean if a field has been set.
func (o *InlineResponse2002) HasAvgDistanceKm() bool {
	if o != nil && o.AvgDistanceKm != nil {
		return true
	}

	return false
}

// SetAvgDistanceKm gets a reference to the given float32 and assigns it to the AvgDistanceKm field.
func (o *InlineResponse2002) SetAvgDistanceKm(v float32) {
	o.AvgDistanceKm = &v
}

func (o InlineResponse2002) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Premix != nil {
		toSerialize["premix"] = o.Premix
	}
	if o.Postmix != nil {
		toSerialize["postmix"] = o.Postmix
	}
	if o.DispatchFrom != nil {
		toSerialize["dispatch_from"] = o.DispatchFrom
	}
	if o.DispatchTarget != nil {
		toSerialize["dispatch_target"] = o.DispatchTarget
	}
	if o.Timeframe != nil {
		toSerialize["timeframe"] = o.Timeframe
	}
	if o.AvgDistanceKm != nil {
		toSerialize["avg_distance_km"] = o.AvgDistanceKm
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2002 struct {
	value *InlineResponse2002
	isSet bool
}

func (v NullableInlineResponse2002) Get() *InlineResponse2002 {
	return v.value
}

func (v *NullableInlineResponse2002) Set(val *InlineResponse2002) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2002) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2002) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2002(val *InlineResponse2002) *NullableInlineResponse2002 {
	return &NullableInlineResponse2002{value: val, isSet: true}
}

func (v NullableInlineResponse2002) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2002) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


