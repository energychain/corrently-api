/*
 * Corrently.io
 *
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. 
 *
 * API version: 2.0.0
 * Contact: dev@stromdao.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ForecastItem struct for ForecastItem
type ForecastItem struct {
	// Timestamps in Seconds
	Epochtime *int32 `json:"epochtime,omitempty"`
	// Timestamp in Standard Milliseconds
	TimeStamp *int32 `json:"timeStamp,omitempty"`
	// Actual GreenPowerIndex for given Timestamp (between 0-100)
	Gsi *int32 `json:"gsi,omitempty"`
	// Indicates if scaling is in operation to predict values
	Scaled *bool `json:"scaled,omitempty"`
	// Subindex just for Solar Energy
	Sci *int32 `json:"sci,omitempty"`
	// Local/regional energyprice modification (cent per kWh or euro per MWh).
	Energyprice *float32 `json:"energyprice,omitempty"`
	// CO2 footprint in Gramm per kwh (only Green Power)
	Co2GOekostrom *int32 `json:"co2_g_oekostrom,omitempty"`
}

// NewForecastItem instantiates a new ForecastItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForecastItem() *ForecastItem {
	this := ForecastItem{}
	return &this
}

// NewForecastItemWithDefaults instantiates a new ForecastItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForecastItemWithDefaults() *ForecastItem {
	this := ForecastItem{}
	return &this
}

// GetEpochtime returns the Epochtime field value if set, zero value otherwise.
func (o *ForecastItem) GetEpochtime() int32 {
	if o == nil || o.Epochtime == nil {
		var ret int32
		return ret
	}
	return *o.Epochtime
}

// GetEpochtimeOk returns a tuple with the Epochtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetEpochtimeOk() (*int32, bool) {
	if o == nil || o.Epochtime == nil {
		return nil, false
	}
	return o.Epochtime, true
}

// HasEpochtime returns a boolean if a field has been set.
func (o *ForecastItem) HasEpochtime() bool {
	if o != nil && o.Epochtime != nil {
		return true
	}

	return false
}

// SetEpochtime gets a reference to the given int32 and assigns it to the Epochtime field.
func (o *ForecastItem) SetEpochtime(v int32) {
	o.Epochtime = &v
}

// GetTimeStamp returns the TimeStamp field value if set, zero value otherwise.
func (o *ForecastItem) GetTimeStamp() int32 {
	if o == nil || o.TimeStamp == nil {
		var ret int32
		return ret
	}
	return *o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetTimeStampOk() (*int32, bool) {
	if o == nil || o.TimeStamp == nil {
		return nil, false
	}
	return o.TimeStamp, true
}

// HasTimeStamp returns a boolean if a field has been set.
func (o *ForecastItem) HasTimeStamp() bool {
	if o != nil && o.TimeStamp != nil {
		return true
	}

	return false
}

// SetTimeStamp gets a reference to the given int32 and assigns it to the TimeStamp field.
func (o *ForecastItem) SetTimeStamp(v int32) {
	o.TimeStamp = &v
}

// GetGsi returns the Gsi field value if set, zero value otherwise.
func (o *ForecastItem) GetGsi() int32 {
	if o == nil || o.Gsi == nil {
		var ret int32
		return ret
	}
	return *o.Gsi
}

// GetGsiOk returns a tuple with the Gsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetGsiOk() (*int32, bool) {
	if o == nil || o.Gsi == nil {
		return nil, false
	}
	return o.Gsi, true
}

// HasGsi returns a boolean if a field has been set.
func (o *ForecastItem) HasGsi() bool {
	if o != nil && o.Gsi != nil {
		return true
	}

	return false
}

// SetGsi gets a reference to the given int32 and assigns it to the Gsi field.
func (o *ForecastItem) SetGsi(v int32) {
	o.Gsi = &v
}

// GetScaled returns the Scaled field value if set, zero value otherwise.
func (o *ForecastItem) GetScaled() bool {
	if o == nil || o.Scaled == nil {
		var ret bool
		return ret
	}
	return *o.Scaled
}

// GetScaledOk returns a tuple with the Scaled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetScaledOk() (*bool, bool) {
	if o == nil || o.Scaled == nil {
		return nil, false
	}
	return o.Scaled, true
}

// HasScaled returns a boolean if a field has been set.
func (o *ForecastItem) HasScaled() bool {
	if o != nil && o.Scaled != nil {
		return true
	}

	return false
}

// SetScaled gets a reference to the given bool and assigns it to the Scaled field.
func (o *ForecastItem) SetScaled(v bool) {
	o.Scaled = &v
}

// GetSci returns the Sci field value if set, zero value otherwise.
func (o *ForecastItem) GetSci() int32 {
	if o == nil || o.Sci == nil {
		var ret int32
		return ret
	}
	return *o.Sci
}

// GetSciOk returns a tuple with the Sci field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetSciOk() (*int32, bool) {
	if o == nil || o.Sci == nil {
		return nil, false
	}
	return o.Sci, true
}

// HasSci returns a boolean if a field has been set.
func (o *ForecastItem) HasSci() bool {
	if o != nil && o.Sci != nil {
		return true
	}

	return false
}

// SetSci gets a reference to the given int32 and assigns it to the Sci field.
func (o *ForecastItem) SetSci(v int32) {
	o.Sci = &v
}

// GetEnergyprice returns the Energyprice field value if set, zero value otherwise.
func (o *ForecastItem) GetEnergyprice() float32 {
	if o == nil || o.Energyprice == nil {
		var ret float32
		return ret
	}
	return *o.Energyprice
}

// GetEnergypriceOk returns a tuple with the Energyprice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetEnergypriceOk() (*float32, bool) {
	if o == nil || o.Energyprice == nil {
		return nil, false
	}
	return o.Energyprice, true
}

// HasEnergyprice returns a boolean if a field has been set.
func (o *ForecastItem) HasEnergyprice() bool {
	if o != nil && o.Energyprice != nil {
		return true
	}

	return false
}

// SetEnergyprice gets a reference to the given float32 and assigns it to the Energyprice field.
func (o *ForecastItem) SetEnergyprice(v float32) {
	o.Energyprice = &v
}

// GetCo2GOekostrom returns the Co2GOekostrom field value if set, zero value otherwise.
func (o *ForecastItem) GetCo2GOekostrom() int32 {
	if o == nil || o.Co2GOekostrom == nil {
		var ret int32
		return ret
	}
	return *o.Co2GOekostrom
}

// GetCo2GOekostromOk returns a tuple with the Co2GOekostrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetCo2GOekostromOk() (*int32, bool) {
	if o == nil || o.Co2GOekostrom == nil {
		return nil, false
	}
	return o.Co2GOekostrom, true
}

// HasCo2GOekostrom returns a boolean if a field has been set.
func (o *ForecastItem) HasCo2GOekostrom() bool {
	if o != nil && o.Co2GOekostrom != nil {
		return true
	}

	return false
}

// SetCo2GOekostrom gets a reference to the given int32 and assigns it to the Co2GOekostrom field.
func (o *ForecastItem) SetCo2GOekostrom(v int32) {
	o.Co2GOekostrom = &v
}

func (o ForecastItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Epochtime != nil {
		toSerialize["epochtime"] = o.Epochtime
	}
	if o.TimeStamp != nil {
		toSerialize["timeStamp"] = o.TimeStamp
	}
	if o.Gsi != nil {
		toSerialize["gsi"] = o.Gsi
	}
	if o.Scaled != nil {
		toSerialize["scaled"] = o.Scaled
	}
	if o.Sci != nil {
		toSerialize["sci"] = o.Sci
	}
	if o.Energyprice != nil {
		toSerialize["energyprice"] = o.Energyprice
	}
	if o.Co2GOekostrom != nil {
		toSerialize["co2_g_oekostrom"] = o.Co2GOekostrom
	}
	return json.Marshal(toSerialize)
}

type NullableForecastItem struct {
	value *ForecastItem
	isSet bool
}

func (v NullableForecastItem) Get() *ForecastItem {
	return v.value
}

func (v *NullableForecastItem) Set(val *ForecastItem) {
	v.value = val
	v.isSet = true
}

func (v NullableForecastItem) IsSet() bool {
	return v.isSet
}

func (v *NullableForecastItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForecastItem(val *ForecastItem) *NullableForecastItem {
	return &NullableForecastItem{value: val, isSet: true}
}

func (v NullableForecastItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForecastItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


