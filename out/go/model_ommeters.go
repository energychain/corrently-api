/*
 * Corrently.io
 *
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * API version: 2.0.0
 * Contact: dev@stromdao.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Ommeters struct for Ommeters
type Ommeters struct {
	// identifier to be used in other methods like readings or activities.
	MeterId *string `json:"meterId,omitempty"`
	// DLMS manufacturerId
	ManufacturerId *string `json:"manufacturerId,omitempty"`
	// Basic address information for geo coding
	Location *string `json:"location,omitempty"`
	// Device type of the meter
	Type *string `json:"type,omitempty"`
	// Physical quantity being measured by the meter
	MeasurementType *string `json:"measurementType,omitempty"`
	// Metering load profile type associated with the meter
	LoadProfileType *string `json:"loadProfileType,omitempty"`
	// Factor imposed on metered current AND voltage by a transducer
	ScalingFactor *int32 `json:"scalingFactor,omitempty"`
	// Factor imposed on metered current by a transducer
	CurrentScalingFactor *int32 `json:"currentScalingFactor,omitempty"`
	// Factor imposed on metered voltage by a transducer
	VoltageScalingFactor *int32 `json:"voltageScalingFactor,omitempty"`
	// Statistical metadata for this household
	Meta *string `json:"meta,omitempty"`
}

// NewOmmeters instantiates a new Ommeters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOmmeters() *Ommeters {
	this := Ommeters{}
	return &this
}

// NewOmmetersWithDefaults instantiates a new Ommeters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOmmetersWithDefaults() *Ommeters {
	this := Ommeters{}
	return &this
}

// GetMeterId returns the MeterId field value if set, zero value otherwise.
func (o *Ommeters) GetMeterId() string {
	if o == nil || o.MeterId == nil {
		var ret string
		return ret
	}
	return *o.MeterId
}

// GetMeterIdOk returns a tuple with the MeterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ommeters) GetMeterIdOk() (*string, bool) {
	if o == nil || o.MeterId == nil {
		return nil, false
	}
	return o.MeterId, true
}

// HasMeterId returns a boolean if a field has been set.
func (o *Ommeters) HasMeterId() bool {
	if o != nil && o.MeterId != nil {
		return true
	}

	return false
}

// SetMeterId gets a reference to the given string and assigns it to the MeterId field.
func (o *Ommeters) SetMeterId(v string) {
	o.MeterId = &v
}

// GetManufacturerId returns the ManufacturerId field value if set, zero value otherwise.
func (o *Ommeters) GetManufacturerId() string {
	if o == nil || o.ManufacturerId == nil {
		var ret string
		return ret
	}
	return *o.ManufacturerId
}

// GetManufacturerIdOk returns a tuple with the ManufacturerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ommeters) GetManufacturerIdOk() (*string, bool) {
	if o == nil || o.ManufacturerId == nil {
		return nil, false
	}
	return o.ManufacturerId, true
}

// HasManufacturerId returns a boolean if a field has been set.
func (o *Ommeters) HasManufacturerId() bool {
	if o != nil && o.ManufacturerId != nil {
		return true
	}

	return false
}

// SetManufacturerId gets a reference to the given string and assigns it to the ManufacturerId field.
func (o *Ommeters) SetManufacturerId(v string) {
	o.ManufacturerId = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Ommeters) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ommeters) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Ommeters) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *Ommeters) SetLocation(v string) {
	o.Location = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Ommeters) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ommeters) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Ommeters) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Ommeters) SetType(v string) {
	o.Type = &v
}

// GetMeasurementType returns the MeasurementType field value if set, zero value otherwise.
func (o *Ommeters) GetMeasurementType() string {
	if o == nil || o.MeasurementType == nil {
		var ret string
		return ret
	}
	return *o.MeasurementType
}

// GetMeasurementTypeOk returns a tuple with the MeasurementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ommeters) GetMeasurementTypeOk() (*string, bool) {
	if o == nil || o.MeasurementType == nil {
		return nil, false
	}
	return o.MeasurementType, true
}

// HasMeasurementType returns a boolean if a field has been set.
func (o *Ommeters) HasMeasurementType() bool {
	if o != nil && o.MeasurementType != nil {
		return true
	}

	return false
}

// SetMeasurementType gets a reference to the given string and assigns it to the MeasurementType field.
func (o *Ommeters) SetMeasurementType(v string) {
	o.MeasurementType = &v
}

// GetLoadProfileType returns the LoadProfileType field value if set, zero value otherwise.
func (o *Ommeters) GetLoadProfileType() string {
	if o == nil || o.LoadProfileType == nil {
		var ret string
		return ret
	}
	return *o.LoadProfileType
}

// GetLoadProfileTypeOk returns a tuple with the LoadProfileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ommeters) GetLoadProfileTypeOk() (*string, bool) {
	if o == nil || o.LoadProfileType == nil {
		return nil, false
	}
	return o.LoadProfileType, true
}

// HasLoadProfileType returns a boolean if a field has been set.
func (o *Ommeters) HasLoadProfileType() bool {
	if o != nil && o.LoadProfileType != nil {
		return true
	}

	return false
}

// SetLoadProfileType gets a reference to the given string and assigns it to the LoadProfileType field.
func (o *Ommeters) SetLoadProfileType(v string) {
	o.LoadProfileType = &v
}

// GetScalingFactor returns the ScalingFactor field value if set, zero value otherwise.
func (o *Ommeters) GetScalingFactor() int32 {
	if o == nil || o.ScalingFactor == nil {
		var ret int32
		return ret
	}
	return *o.ScalingFactor
}

// GetScalingFactorOk returns a tuple with the ScalingFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ommeters) GetScalingFactorOk() (*int32, bool) {
	if o == nil || o.ScalingFactor == nil {
		return nil, false
	}
	return o.ScalingFactor, true
}

// HasScalingFactor returns a boolean if a field has been set.
func (o *Ommeters) HasScalingFactor() bool {
	if o != nil && o.ScalingFactor != nil {
		return true
	}

	return false
}

// SetScalingFactor gets a reference to the given int32 and assigns it to the ScalingFactor field.
func (o *Ommeters) SetScalingFactor(v int32) {
	o.ScalingFactor = &v
}

// GetCurrentScalingFactor returns the CurrentScalingFactor field value if set, zero value otherwise.
func (o *Ommeters) GetCurrentScalingFactor() int32 {
	if o == nil || o.CurrentScalingFactor == nil {
		var ret int32
		return ret
	}
	return *o.CurrentScalingFactor
}

// GetCurrentScalingFactorOk returns a tuple with the CurrentScalingFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ommeters) GetCurrentScalingFactorOk() (*int32, bool) {
	if o == nil || o.CurrentScalingFactor == nil {
		return nil, false
	}
	return o.CurrentScalingFactor, true
}

// HasCurrentScalingFactor returns a boolean if a field has been set.
func (o *Ommeters) HasCurrentScalingFactor() bool {
	if o != nil && o.CurrentScalingFactor != nil {
		return true
	}

	return false
}

// SetCurrentScalingFactor gets a reference to the given int32 and assigns it to the CurrentScalingFactor field.
func (o *Ommeters) SetCurrentScalingFactor(v int32) {
	o.CurrentScalingFactor = &v
}

// GetVoltageScalingFactor returns the VoltageScalingFactor field value if set, zero value otherwise.
func (o *Ommeters) GetVoltageScalingFactor() int32 {
	if o == nil || o.VoltageScalingFactor == nil {
		var ret int32
		return ret
	}
	return *o.VoltageScalingFactor
}

// GetVoltageScalingFactorOk returns a tuple with the VoltageScalingFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ommeters) GetVoltageScalingFactorOk() (*int32, bool) {
	if o == nil || o.VoltageScalingFactor == nil {
		return nil, false
	}
	return o.VoltageScalingFactor, true
}

// HasVoltageScalingFactor returns a boolean if a field has been set.
func (o *Ommeters) HasVoltageScalingFactor() bool {
	if o != nil && o.VoltageScalingFactor != nil {
		return true
	}

	return false
}

// SetVoltageScalingFactor gets a reference to the given int32 and assigns it to the VoltageScalingFactor field.
func (o *Ommeters) SetVoltageScalingFactor(v int32) {
	o.VoltageScalingFactor = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Ommeters) GetMeta() string {
	if o == nil || o.Meta == nil {
		var ret string
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ommeters) GetMetaOk() (*string, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Ommeters) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given string and assigns it to the Meta field.
func (o *Ommeters) SetMeta(v string) {
	o.Meta = &v
}

func (o Ommeters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MeterId != nil {
		toSerialize["meterId"] = o.MeterId
	}
	if o.ManufacturerId != nil {
		toSerialize["manufacturerId"] = o.ManufacturerId
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.MeasurementType != nil {
		toSerialize["measurementType"] = o.MeasurementType
	}
	if o.LoadProfileType != nil {
		toSerialize["loadProfileType"] = o.LoadProfileType
	}
	if o.ScalingFactor != nil {
		toSerialize["scalingFactor"] = o.ScalingFactor
	}
	if o.CurrentScalingFactor != nil {
		toSerialize["currentScalingFactor"] = o.CurrentScalingFactor
	}
	if o.VoltageScalingFactor != nil {
		toSerialize["voltageScalingFactor"] = o.VoltageScalingFactor
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableOmmeters struct {
	value *Ommeters
	isSet bool
}

func (v NullableOmmeters) Get() *Ommeters {
	return v.value
}

func (v *NullableOmmeters) Set(val *Ommeters) {
	v.value = val
	v.isSet = true
}

func (v NullableOmmeters) IsSet() bool {
	return v.isSet
}

func (v *NullableOmmeters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOmmeters(val *Ommeters) *NullableOmmeters {
	return &NullableOmmeters{value: val, isSet: true}
}

func (v NullableOmmeters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOmmeters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


