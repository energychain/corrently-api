/*
 * Corrently.io
 *
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. 
 *
 * API version: 2.0.0
 * Contact: dev@stromdao.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2006 struct for InlineResponse2006
type InlineResponse2006 struct {
	// Latest Status
	WimStatus *string `json:"wim_status,omitempty"`
	// Starting time of process
	WimStarted *int32 `json:"wim_started,omitempty"`
}

// NewInlineResponse2006 instantiates a new InlineResponse2006 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2006() *InlineResponse2006 {
	this := InlineResponse2006{}
	return &this
}

// NewInlineResponse2006WithDefaults instantiates a new InlineResponse2006 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2006WithDefaults() *InlineResponse2006 {
	this := InlineResponse2006{}
	return &this
}

// GetWimStatus returns the WimStatus field value if set, zero value otherwise.
func (o *InlineResponse2006) GetWimStatus() string {
	if o == nil || o.WimStatus == nil {
		var ret string
		return ret
	}
	return *o.WimStatus
}

// GetWimStatusOk returns a tuple with the WimStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetWimStatusOk() (*string, bool) {
	if o == nil || o.WimStatus == nil {
		return nil, false
	}
	return o.WimStatus, true
}

// HasWimStatus returns a boolean if a field has been set.
func (o *InlineResponse2006) HasWimStatus() bool {
	if o != nil && o.WimStatus != nil {
		return true
	}

	return false
}

// SetWimStatus gets a reference to the given string and assigns it to the WimStatus field.
func (o *InlineResponse2006) SetWimStatus(v string) {
	o.WimStatus = &v
}

// GetWimStarted returns the WimStarted field value if set, zero value otherwise.
func (o *InlineResponse2006) GetWimStarted() int32 {
	if o == nil || o.WimStarted == nil {
		var ret int32
		return ret
	}
	return *o.WimStarted
}

// GetWimStartedOk returns a tuple with the WimStarted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetWimStartedOk() (*int32, bool) {
	if o == nil || o.WimStarted == nil {
		return nil, false
	}
	return o.WimStarted, true
}

// HasWimStarted returns a boolean if a field has been set.
func (o *InlineResponse2006) HasWimStarted() bool {
	if o != nil && o.WimStarted != nil {
		return true
	}

	return false
}

// SetWimStarted gets a reference to the given int32 and assigns it to the WimStarted field.
func (o *InlineResponse2006) SetWimStarted(v int32) {
	o.WimStarted = &v
}

func (o InlineResponse2006) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.WimStatus != nil {
		toSerialize["wim_status"] = o.WimStatus
	}
	if o.WimStarted != nil {
		toSerialize["wim_started"] = o.WimStarted
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2006 struct {
	value *InlineResponse2006
	isSet bool
}

func (v NullableInlineResponse2006) Get() *InlineResponse2006 {
	return v.value
}

func (v *NullableInlineResponse2006) Set(val *InlineResponse2006) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2006) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2006) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2006(val *InlineResponse2006) *NullableInlineResponse2006 {
	return &NullableInlineResponse2006{value: val, isSet: true}
}

func (v NullableInlineResponse2006) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2006) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


