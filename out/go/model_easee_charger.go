/*
 * Corrently.io
 *
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * API version: 2.0.0
 * Contact: dev@stromdao.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EaseeCharger struct for EaseeCharger
type EaseeCharger struct {
	// Given ID by easee api
	Id *string `json:"id,omitempty"`
	// Name set for charger
	Name *string `json:"name,omitempty"`
	// lastSession Info as given by easee API
	LastSession *string `json:"lastSession,omitempty"`
}

// NewEaseeCharger instantiates a new EaseeCharger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEaseeCharger() *EaseeCharger {
	this := EaseeCharger{}
	return &this
}

// NewEaseeChargerWithDefaults instantiates a new EaseeCharger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEaseeChargerWithDefaults() *EaseeCharger {
	this := EaseeCharger{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EaseeCharger) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EaseeCharger) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EaseeCharger) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EaseeCharger) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EaseeCharger) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EaseeCharger) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EaseeCharger) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EaseeCharger) SetName(v string) {
	o.Name = &v
}

// GetLastSession returns the LastSession field value if set, zero value otherwise.
func (o *EaseeCharger) GetLastSession() string {
	if o == nil || o.LastSession == nil {
		var ret string
		return ret
	}
	return *o.LastSession
}

// GetLastSessionOk returns a tuple with the LastSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EaseeCharger) GetLastSessionOk() (*string, bool) {
	if o == nil || o.LastSession == nil {
		return nil, false
	}
	return o.LastSession, true
}

// HasLastSession returns a boolean if a field has been set.
func (o *EaseeCharger) HasLastSession() bool {
	if o != nil && o.LastSession != nil {
		return true
	}

	return false
}

// SetLastSession gets a reference to the given string and assigns it to the LastSession field.
func (o *EaseeCharger) SetLastSession(v string) {
	o.LastSession = &v
}

func (o EaseeCharger) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.LastSession != nil {
		toSerialize["lastSession"] = o.LastSession
	}
	return json.Marshal(toSerialize)
}

type NullableEaseeCharger struct {
	value *EaseeCharger
	isSet bool
}

func (v NullableEaseeCharger) Get() *EaseeCharger {
	return v.value
}

func (v *NullableEaseeCharger) Set(val *EaseeCharger) {
	v.value = val
	v.isSet = true
}

func (v NullableEaseeCharger) IsSet() bool {
	return v.isSet
}

func (v *NullableEaseeCharger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEaseeCharger(val *EaseeCharger) *NullableEaseeCharger {
	return &NullableEaseeCharger{value: val, isSet: true}
}

func (v NullableEaseeCharger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEaseeCharger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


