/*
 * Corrently.io
 *
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * API version: 2.0.0
 * Contact: dev@stromdao.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2001 struct for InlineResponse2001
type InlineResponse2001 struct {
	// Prediction for the upcomming hours
	Forecast *[]ForecastItem `json:"forecast,omitempty"`
	Location *InlineResponse2001Location `json:"location,omitempty"`
	Matrix *InlineResponse2001Matrix `json:"matrix,omitempty"`
}

// NewInlineResponse2001 instantiates a new InlineResponse2001 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2001() *InlineResponse2001 {
	this := InlineResponse2001{}
	return &this
}

// NewInlineResponse2001WithDefaults instantiates a new InlineResponse2001 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2001WithDefaults() *InlineResponse2001 {
	this := InlineResponse2001{}
	return &this
}

// GetForecast returns the Forecast field value if set, zero value otherwise.
func (o *InlineResponse2001) GetForecast() []ForecastItem {
	if o == nil || o.Forecast == nil {
		var ret []ForecastItem
		return ret
	}
	return *o.Forecast
}

// GetForecastOk returns a tuple with the Forecast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001) GetForecastOk() (*[]ForecastItem, bool) {
	if o == nil || o.Forecast == nil {
		return nil, false
	}
	return o.Forecast, true
}

// HasForecast returns a boolean if a field has been set.
func (o *InlineResponse2001) HasForecast() bool {
	if o != nil && o.Forecast != nil {
		return true
	}

	return false
}

// SetForecast gets a reference to the given []ForecastItem and assigns it to the Forecast field.
func (o *InlineResponse2001) SetForecast(v []ForecastItem) {
	o.Forecast = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *InlineResponse2001) GetLocation() InlineResponse2001Location {
	if o == nil || o.Location == nil {
		var ret InlineResponse2001Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001) GetLocationOk() (*InlineResponse2001Location, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *InlineResponse2001) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given InlineResponse2001Location and assigns it to the Location field.
func (o *InlineResponse2001) SetLocation(v InlineResponse2001Location) {
	o.Location = &v
}

// GetMatrix returns the Matrix field value if set, zero value otherwise.
func (o *InlineResponse2001) GetMatrix() InlineResponse2001Matrix {
	if o == nil || o.Matrix == nil {
		var ret InlineResponse2001Matrix
		return ret
	}
	return *o.Matrix
}

// GetMatrixOk returns a tuple with the Matrix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001) GetMatrixOk() (*InlineResponse2001Matrix, bool) {
	if o == nil || o.Matrix == nil {
		return nil, false
	}
	return o.Matrix, true
}

// HasMatrix returns a boolean if a field has been set.
func (o *InlineResponse2001) HasMatrix() bool {
	if o != nil && o.Matrix != nil {
		return true
	}

	return false
}

// SetMatrix gets a reference to the given InlineResponse2001Matrix and assigns it to the Matrix field.
func (o *InlineResponse2001) SetMatrix(v InlineResponse2001Matrix) {
	o.Matrix = &v
}

func (o InlineResponse2001) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Forecast != nil {
		toSerialize["forecast"] = o.Forecast
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Matrix != nil {
		toSerialize["matrix"] = o.Matrix
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2001 struct {
	value *InlineResponse2001
	isSet bool
}

func (v NullableInlineResponse2001) Get() *InlineResponse2001 {
	return v.value
}

func (v *NullableInlineResponse2001) Set(val *InlineResponse2001) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2001) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2001) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2001(val *InlineResponse2001) *NullableInlineResponse2001 {
	return &NullableInlineResponse2001{value: val, isSet: true}
}

func (v NullableInlineResponse2001) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2001) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


