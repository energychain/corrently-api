/*
 * Corrently.io
 *
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * API version: 2.0.0
 * Contact: dev@stromdao.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Componentsh0 struct for Componentsh0
type Componentsh0 struct {
	// Total sum in Euro for this price component.
	Sum *float64 `json:"sum,omitempty"`
	// What is this price component about
	Describtion *string `json:"describtion,omitempty"`
	// Frequency/dependency of component
	Mutlityplier *string `json:"mutlityplier,omitempty"`
	// Single unit price multiyplier is based on
	Per *float64 `json:"per,omitempty"`
	// Sub components of this price
	Components *[]Componentsh0 `json:"components,omitempty"`
}

// NewComponentsh0 instantiates a new Componentsh0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentsh0() *Componentsh0 {
	this := Componentsh0{}
	return &this
}

// NewComponentsh0WithDefaults instantiates a new Componentsh0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentsh0WithDefaults() *Componentsh0 {
	this := Componentsh0{}
	return &this
}

// GetSum returns the Sum field value if set, zero value otherwise.
func (o *Componentsh0) GetSum() float64 {
	if o == nil || o.Sum == nil {
		var ret float64
		return ret
	}
	return *o.Sum
}

// GetSumOk returns a tuple with the Sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Componentsh0) GetSumOk() (*float64, bool) {
	if o == nil || o.Sum == nil {
		return nil, false
	}
	return o.Sum, true
}

// HasSum returns a boolean if a field has been set.
func (o *Componentsh0) HasSum() bool {
	if o != nil && o.Sum != nil {
		return true
	}

	return false
}

// SetSum gets a reference to the given float64 and assigns it to the Sum field.
func (o *Componentsh0) SetSum(v float64) {
	o.Sum = &v
}

// GetDescribtion returns the Describtion field value if set, zero value otherwise.
func (o *Componentsh0) GetDescribtion() string {
	if o == nil || o.Describtion == nil {
		var ret string
		return ret
	}
	return *o.Describtion
}

// GetDescribtionOk returns a tuple with the Describtion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Componentsh0) GetDescribtionOk() (*string, bool) {
	if o == nil || o.Describtion == nil {
		return nil, false
	}
	return o.Describtion, true
}

// HasDescribtion returns a boolean if a field has been set.
func (o *Componentsh0) HasDescribtion() bool {
	if o != nil && o.Describtion != nil {
		return true
	}

	return false
}

// SetDescribtion gets a reference to the given string and assigns it to the Describtion field.
func (o *Componentsh0) SetDescribtion(v string) {
	o.Describtion = &v
}

// GetMutlityplier returns the Mutlityplier field value if set, zero value otherwise.
func (o *Componentsh0) GetMutlityplier() string {
	if o == nil || o.Mutlityplier == nil {
		var ret string
		return ret
	}
	return *o.Mutlityplier
}

// GetMutlityplierOk returns a tuple with the Mutlityplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Componentsh0) GetMutlityplierOk() (*string, bool) {
	if o == nil || o.Mutlityplier == nil {
		return nil, false
	}
	return o.Mutlityplier, true
}

// HasMutlityplier returns a boolean if a field has been set.
func (o *Componentsh0) HasMutlityplier() bool {
	if o != nil && o.Mutlityplier != nil {
		return true
	}

	return false
}

// SetMutlityplier gets a reference to the given string and assigns it to the Mutlityplier field.
func (o *Componentsh0) SetMutlityplier(v string) {
	o.Mutlityplier = &v
}

// GetPer returns the Per field value if set, zero value otherwise.
func (o *Componentsh0) GetPer() float64 {
	if o == nil || o.Per == nil {
		var ret float64
		return ret
	}
	return *o.Per
}

// GetPerOk returns a tuple with the Per field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Componentsh0) GetPerOk() (*float64, bool) {
	if o == nil || o.Per == nil {
		return nil, false
	}
	return o.Per, true
}

// HasPer returns a boolean if a field has been set.
func (o *Componentsh0) HasPer() bool {
	if o != nil && o.Per != nil {
		return true
	}

	return false
}

// SetPer gets a reference to the given float64 and assigns it to the Per field.
func (o *Componentsh0) SetPer(v float64) {
	o.Per = &v
}

// GetComponents returns the Components field value if set, zero value otherwise.
func (o *Componentsh0) GetComponents() []Componentsh0 {
	if o == nil || o.Components == nil {
		var ret []Componentsh0
		return ret
	}
	return *o.Components
}

// GetComponentsOk returns a tuple with the Components field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Componentsh0) GetComponentsOk() (*[]Componentsh0, bool) {
	if o == nil || o.Components == nil {
		return nil, false
	}
	return o.Components, true
}

// HasComponents returns a boolean if a field has been set.
func (o *Componentsh0) HasComponents() bool {
	if o != nil && o.Components != nil {
		return true
	}

	return false
}

// SetComponents gets a reference to the given []Componentsh0 and assigns it to the Components field.
func (o *Componentsh0) SetComponents(v []Componentsh0) {
	o.Components = &v
}

func (o Componentsh0) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Sum != nil {
		toSerialize["sum"] = o.Sum
	}
	if o.Describtion != nil {
		toSerialize["describtion"] = o.Describtion
	}
	if o.Mutlityplier != nil {
		toSerialize["mutlityplier"] = o.Mutlityplier
	}
	if o.Per != nil {
		toSerialize["per"] = o.Per
	}
	if o.Components != nil {
		toSerialize["components"] = o.Components
	}
	return json.Marshal(toSerialize)
}

type NullableComponentsh0 struct {
	value *Componentsh0
	isSet bool
}

func (v NullableComponentsh0) Get() *Componentsh0 {
	return v.value
}

func (v *NullableComponentsh0) Set(val *Componentsh0) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentsh0) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentsh0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentsh0(val *Componentsh0) *NullableComponentsh0 {
	return &NullableComponentsh0{value: val, isSet: true}
}

func (v NullableComponentsh0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentsh0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


