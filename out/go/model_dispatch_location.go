/*
 * Corrently.io
 *
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. 
 *
 * API version: 2.0.0
 * Contact: dev@stromdao.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DispatchLocation struct for DispatchLocation
type DispatchLocation struct {
	// Percentage of energy
	Energy *float32 `json:"energy,omitempty"`
	// GeoJSON encoded location of target or source of green energy.
	Location *map[string]interface{} `json:"location,omitempty"`
}

// NewDispatchLocation instantiates a new DispatchLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDispatchLocation() *DispatchLocation {
	this := DispatchLocation{}
	return &this
}

// NewDispatchLocationWithDefaults instantiates a new DispatchLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDispatchLocationWithDefaults() *DispatchLocation {
	this := DispatchLocation{}
	return &this
}

// GetEnergy returns the Energy field value if set, zero value otherwise.
func (o *DispatchLocation) GetEnergy() float32 {
	if o == nil || o.Energy == nil {
		var ret float32
		return ret
	}
	return *o.Energy
}

// GetEnergyOk returns a tuple with the Energy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DispatchLocation) GetEnergyOk() (*float32, bool) {
	if o == nil || o.Energy == nil {
		return nil, false
	}
	return o.Energy, true
}

// HasEnergy returns a boolean if a field has been set.
func (o *DispatchLocation) HasEnergy() bool {
	if o != nil && o.Energy != nil {
		return true
	}

	return false
}

// SetEnergy gets a reference to the given float32 and assigns it to the Energy field.
func (o *DispatchLocation) SetEnergy(v float32) {
	o.Energy = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *DispatchLocation) GetLocation() map[string]interface{} {
	if o == nil || o.Location == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DispatchLocation) GetLocationOk() (*map[string]interface{}, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *DispatchLocation) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given map[string]interface{} and assigns it to the Location field.
func (o *DispatchLocation) SetLocation(v map[string]interface{}) {
	o.Location = &v
}

func (o DispatchLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Energy != nil {
		toSerialize["energy"] = o.Energy
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	return json.Marshal(toSerialize)
}

type NullableDispatchLocation struct {
	value *DispatchLocation
	isSet bool
}

func (v NullableDispatchLocation) Get() *DispatchLocation {
	return v.value
}

func (v *NullableDispatchLocation) Set(val *DispatchLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableDispatchLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableDispatchLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDispatchLocation(val *DispatchLocation) *NullableDispatchLocation {
	return &NullableDispatchLocation{value: val, isSet: true}
}

func (v NullableDispatchLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDispatchLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


