<?php
/**
 * Ommeters
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Corrently.io
 *
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Ommeters Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Ommeters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ommeters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'meter_id' => 'string',
        'manufacturer_id' => 'string',
        'location' => 'string',
        'type' => 'string',
        'measurement_type' => 'string',
        'load_profile_type' => 'string',
        'scaling_factor' => 'int',
        'current_scaling_factor' => 'int',
        'voltage_scaling_factor' => 'int',
        'meta' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'meter_id' => null,
        'manufacturer_id' => null,
        'location' => null,
        'type' => null,
        'measurement_type' => null,
        'load_profile_type' => null,
        'scaling_factor' => null,
        'current_scaling_factor' => null,
        'voltage_scaling_factor' => null,
        'meta' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'meter_id' => 'meterId',
        'manufacturer_id' => 'manufacturerId',
        'location' => 'location',
        'type' => 'type',
        'measurement_type' => 'measurementType',
        'load_profile_type' => 'loadProfileType',
        'scaling_factor' => 'scalingFactor',
        'current_scaling_factor' => 'currentScalingFactor',
        'voltage_scaling_factor' => 'voltageScalingFactor',
        'meta' => 'meta'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'meter_id' => 'setMeterId',
        'manufacturer_id' => 'setManufacturerId',
        'location' => 'setLocation',
        'type' => 'setType',
        'measurement_type' => 'setMeasurementType',
        'load_profile_type' => 'setLoadProfileType',
        'scaling_factor' => 'setScalingFactor',
        'current_scaling_factor' => 'setCurrentScalingFactor',
        'voltage_scaling_factor' => 'setVoltageScalingFactor',
        'meta' => 'setMeta'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'meter_id' => 'getMeterId',
        'manufacturer_id' => 'getManufacturerId',
        'location' => 'getLocation',
        'type' => 'getType',
        'measurement_type' => 'getMeasurementType',
        'load_profile_type' => 'getLoadProfileType',
        'scaling_factor' => 'getScalingFactor',
        'current_scaling_factor' => 'getCurrentScalingFactor',
        'voltage_scaling_factor' => 'getVoltageScalingFactor',
        'meta' => 'getMeta'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['meter_id'] = $data['meter_id'] ?? null;
        $this->container['manufacturer_id'] = $data['manufacturer_id'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['measurement_type'] = $data['measurement_type'] ?? null;
        $this->container['load_profile_type'] = $data['load_profile_type'] ?? null;
        $this->container['scaling_factor'] = $data['scaling_factor'] ?? null;
        $this->container['current_scaling_factor'] = $data['current_scaling_factor'] ?? null;
        $this->container['voltage_scaling_factor'] = $data['voltage_scaling_factor'] ?? null;
        $this->container['meta'] = $data['meta'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets meter_id
     *
     * @return string|null
     */
    public function getMeterId()
    {
        return $this->container['meter_id'];
    }

    /**
     * Sets meter_id
     *
     * @param string|null $meter_id identifier to be used in other methods like readings or activities.
     *
     * @return self
     */
    public function setMeterId($meter_id)
    {
        $this->container['meter_id'] = $meter_id;

        return $this;
    }

    /**
     * Gets manufacturer_id
     *
     * @return string|null
     */
    public function getManufacturerId()
    {
        return $this->container['manufacturer_id'];
    }

    /**
     * Sets manufacturer_id
     *
     * @param string|null $manufacturer_id DLMS manufacturerId
     *
     * @return self
     */
    public function setManufacturerId($manufacturer_id)
    {
        $this->container['manufacturer_id'] = $manufacturer_id;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location Basic address information for geo coding
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Device type of the meter
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets measurement_type
     *
     * @return string|null
     */
    public function getMeasurementType()
    {
        return $this->container['measurement_type'];
    }

    /**
     * Sets measurement_type
     *
     * @param string|null $measurement_type Physical quantity being measured by the meter
     *
     * @return self
     */
    public function setMeasurementType($measurement_type)
    {
        $this->container['measurement_type'] = $measurement_type;

        return $this;
    }

    /**
     * Gets load_profile_type
     *
     * @return string|null
     */
    public function getLoadProfileType()
    {
        return $this->container['load_profile_type'];
    }

    /**
     * Sets load_profile_type
     *
     * @param string|null $load_profile_type Metering load profile type associated with the meter
     *
     * @return self
     */
    public function setLoadProfileType($load_profile_type)
    {
        $this->container['load_profile_type'] = $load_profile_type;

        return $this;
    }

    /**
     * Gets scaling_factor
     *
     * @return int|null
     */
    public function getScalingFactor()
    {
        return $this->container['scaling_factor'];
    }

    /**
     * Sets scaling_factor
     *
     * @param int|null $scaling_factor Factor imposed on metered current AND voltage by a transducer
     *
     * @return self
     */
    public function setScalingFactor($scaling_factor)
    {
        $this->container['scaling_factor'] = $scaling_factor;

        return $this;
    }

    /**
     * Gets current_scaling_factor
     *
     * @return int|null
     */
    public function getCurrentScalingFactor()
    {
        return $this->container['current_scaling_factor'];
    }

    /**
     * Sets current_scaling_factor
     *
     * @param int|null $current_scaling_factor Factor imposed on metered current by a transducer
     *
     * @return self
     */
    public function setCurrentScalingFactor($current_scaling_factor)
    {
        $this->container['current_scaling_factor'] = $current_scaling_factor;

        return $this;
    }

    /**
     * Gets voltage_scaling_factor
     *
     * @return int|null
     */
    public function getVoltageScalingFactor()
    {
        return $this->container['voltage_scaling_factor'];
    }

    /**
     * Sets voltage_scaling_factor
     *
     * @param int|null $voltage_scaling_factor Factor imposed on metered voltage by a transducer
     *
     * @return self
     */
    public function setVoltageScalingFactor($voltage_scaling_factor)
    {
        $this->container['voltage_scaling_factor'] = $voltage_scaling_factor;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return string|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param string|null $meta Statistical metadata for this household
     *
     * @return self
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


