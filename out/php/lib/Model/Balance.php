<?php
/**
 * Balance
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Corrently.io
 *
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Balance Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Balance implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Balance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'soll' => 'int',
        'haben' => 'int',
        'balance' => 'int',
        'txs' => '\OpenAPI\Client\Model\Transactions[]',
        'variation' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'soll' => null,
        'haben' => null,
        'balance' => null,
        'txs' => null,
        'variation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'soll' => 'soll',
        'haben' => 'haben',
        'balance' => 'balance',
        'txs' => 'txs',
        'variation' => 'variation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'soll' => 'setSoll',
        'haben' => 'setHaben',
        'balance' => 'setBalance',
        'txs' => 'setTxs',
        'variation' => 'setVariation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'soll' => 'getSoll',
        'haben' => 'getHaben',
        'balance' => 'getBalance',
        'txs' => 'getTxs',
        'variation' => 'getVariation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const VARIATION_GSB = 'gsb';
    const VARIATION_ERZEUGUNG = 'erzeugung';
    const VARIATION_EIGENSTROM = 'eigenstrom';
    const VARIATION_CO2 = 'co2';
    const VARIATION_BAEUME = 'baeume';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVariationAllowableValues()
    {
        return [
            self::VARIATION_GSB,
            self::VARIATION_ERZEUGUNG,
            self::VARIATION_EIGENSTROM,
            self::VARIATION_CO2,
            self::VARIATION_BAEUME,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['soll'] = $data['soll'] ?? null;
        $this->container['haben'] = $data['haben'] ?? null;
        $this->container['balance'] = $data['balance'] ?? null;
        $this->container['txs'] = $data['txs'] ?? null;
        $this->container['variation'] = $data['variation'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getVariationAllowableValues();
        if (!is_null($this->container['variation']) && !in_array($this->container['variation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'variation', must be one of '%s'",
                $this->container['variation'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets soll
     *
     * @return int|null
     */
    public function getSoll()
    {
        return $this->container['soll'];
    }

    /**
     * Sets soll
     *
     * @param int|null $soll Sum due by account
     *
     * @return self
     */
    public function setSoll($soll)
    {
        $this->container['soll'] = $soll;

        return $this;
    }

    /**
     * Gets haben
     *
     * @return int|null
     */
    public function getHaben()
    {
        return $this->container['haben'];
    }

    /**
     * Sets haben
     *
     * @param int|null $haben Sum owned by account
     *
     * @return self
     */
    public function setHaben($haben)
    {
        $this->container['haben'] = $haben;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return int|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param int|null $balance Sum owned - sum due by account
     *
     * @return self
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets txs
     *
     * @return \OpenAPI\Client\Model\Transactions[]|null
     */
    public function getTxs()
    {
        return $this->container['txs'];
    }

    /**
     * Sets txs
     *
     * @param \OpenAPI\Client\Model\Transactions[]|null $txs txs
     *
     * @return self
     */
    public function setTxs($txs)
    {
        $this->container['txs'] = $txs;

        return $this;
    }

    /**
     * Gets variation
     *
     * @return string|null
     */
    public function getVariation()
    {
        return $this->container['variation'];
    }

    /**
     * Sets variation
     *
     * @param string|null $variation Type of subbalance (sub account)
     *
     * @return self
     */
    public function setVariation($variation)
    {
        $allowedValues = $this->getVariationAllowableValues();
        if (!is_null($variation) && !in_array($variation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'variation', must be one of '%s'",
                    $variation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['variation'] = $variation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


