<?php
/**
 * ForecastItem
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Corrently.io
 *
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ForecastItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ForecastItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ForecastItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'epochtime' => 'int',
        'time_stamp' => 'int',
        'gsi' => 'int',
        'scaled' => 'bool',
        'sci' => 'int',
        'energyprice' => 'float',
        'co2_g_oekostrom' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'epochtime' => null,
        'time_stamp' => null,
        'gsi' => null,
        'scaled' => null,
        'sci' => null,
        'energyprice' => null,
        'co2_g_oekostrom' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'epochtime' => 'epochtime',
        'time_stamp' => 'timeStamp',
        'gsi' => 'gsi',
        'scaled' => 'scaled',
        'sci' => 'sci',
        'energyprice' => 'energyprice',
        'co2_g_oekostrom' => 'co2_g_oekostrom'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'epochtime' => 'setEpochtime',
        'time_stamp' => 'setTimeStamp',
        'gsi' => 'setGsi',
        'scaled' => 'setScaled',
        'sci' => 'setSci',
        'energyprice' => 'setEnergyprice',
        'co2_g_oekostrom' => 'setCo2GOekostrom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'epochtime' => 'getEpochtime',
        'time_stamp' => 'getTimeStamp',
        'gsi' => 'getGsi',
        'scaled' => 'getScaled',
        'sci' => 'getSci',
        'energyprice' => 'getEnergyprice',
        'co2_g_oekostrom' => 'getCo2GOekostrom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['epochtime'] = $data['epochtime'] ?? null;
        $this->container['time_stamp'] = $data['time_stamp'] ?? null;
        $this->container['gsi'] = $data['gsi'] ?? null;
        $this->container['scaled'] = $data['scaled'] ?? null;
        $this->container['sci'] = $data['sci'] ?? null;
        $this->container['energyprice'] = $data['energyprice'] ?? null;
        $this->container['co2_g_oekostrom'] = $data['co2_g_oekostrom'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets epochtime
     *
     * @return int|null
     */
    public function getEpochtime()
    {
        return $this->container['epochtime'];
    }

    /**
     * Sets epochtime
     *
     * @param int|null $epochtime Timestamps in Seconds
     *
     * @return self
     */
    public function setEpochtime($epochtime)
    {
        $this->container['epochtime'] = $epochtime;

        return $this;
    }

    /**
     * Gets time_stamp
     *
     * @return int|null
     */
    public function getTimeStamp()
    {
        return $this->container['time_stamp'];
    }

    /**
     * Sets time_stamp
     *
     * @param int|null $time_stamp Timestamp in Standard Milliseconds
     *
     * @return self
     */
    public function setTimeStamp($time_stamp)
    {
        $this->container['time_stamp'] = $time_stamp;

        return $this;
    }

    /**
     * Gets gsi
     *
     * @return int|null
     */
    public function getGsi()
    {
        return $this->container['gsi'];
    }

    /**
     * Sets gsi
     *
     * @param int|null $gsi Actual GreenPowerIndex for given Timestamp (between 0-100)
     *
     * @return self
     */
    public function setGsi($gsi)
    {
        $this->container['gsi'] = $gsi;

        return $this;
    }

    /**
     * Gets scaled
     *
     * @return bool|null
     */
    public function getScaled()
    {
        return $this->container['scaled'];
    }

    /**
     * Sets scaled
     *
     * @param bool|null $scaled Indicates if scaling is in operation to predict values
     *
     * @return self
     */
    public function setScaled($scaled)
    {
        $this->container['scaled'] = $scaled;

        return $this;
    }

    /**
     * Gets sci
     *
     * @return int|null
     */
    public function getSci()
    {
        return $this->container['sci'];
    }

    /**
     * Sets sci
     *
     * @param int|null $sci Subindex just for Solar Energy
     *
     * @return self
     */
    public function setSci($sci)
    {
        $this->container['sci'] = $sci;

        return $this;
    }

    /**
     * Gets energyprice
     *
     * @return float|null
     */
    public function getEnergyprice()
    {
        return $this->container['energyprice'];
    }

    /**
     * Sets energyprice
     *
     * @param float|null $energyprice Local/regional energyprice modification (cent per kWh or euro per MWh).
     *
     * @return self
     */
    public function setEnergyprice($energyprice)
    {
        $this->container['energyprice'] = $energyprice;

        return $this;
    }

    /**
     * Gets co2_g_oekostrom
     *
     * @return int|null
     */
    public function getCo2GOekostrom()
    {
        return $this->container['co2_g_oekostrom'];
    }

    /**
     * Sets co2_g_oekostrom
     *
     * @param int|null $co2_g_oekostrom CO2 footprint in Gramm per kwh (only Green Power)
     *
     * @return self
     */
    public function setCo2GOekostrom($co2_g_oekostrom)
    {
        $this->container['co2_g_oekostrom'] = $co2_g_oekostrom;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


