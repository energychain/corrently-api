<?php
/**
 * InlineResponse2004
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Corrently.io
 *
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineResponse2004 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2004 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_4';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account' => 'string',
        '_1_8_0' => 'int',
        '_1_8_1' => 'int',
        '_1_8_2' => 'int',
        'time_stamp' => 'int',
        '_processing_time' => 'int',
        'co2_g_standard' => 'int',
        'co2_g_oekostrom' => 'int',
        'ttl' => 'int',
        'credits' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account' => null,
        '_1_8_0' => null,
        '_1_8_1' => null,
        '_1_8_2' => null,
        'time_stamp' => null,
        '_processing_time' => null,
        'co2_g_standard' => null,
        'co2_g_oekostrom' => null,
        'ttl' => null,
        'credits' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account' => 'account',
        '_1_8_0' => '1.8.0',
        '_1_8_1' => '1.8.1',
        '_1_8_2' => '1.8.2',
        'time_stamp' => 'timeStamp',
        '_processing_time' => '_processingTime',
        'co2_g_standard' => 'co2_g_standard',
        'co2_g_oekostrom' => 'co2_g_oekostrom',
        'ttl' => 'ttl',
        'credits' => 'credits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account' => 'setAccount',
        '_1_8_0' => 'set180',
        '_1_8_1' => 'set181',
        '_1_8_2' => 'set182',
        'time_stamp' => 'setTimeStamp',
        '_processing_time' => 'setProcessingTime',
        'co2_g_standard' => 'setCo2GStandard',
        'co2_g_oekostrom' => 'setCo2GOekostrom',
        'ttl' => 'setTtl',
        'credits' => 'setCredits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account' => 'getAccount',
        '_1_8_0' => 'get180',
        '_1_8_1' => 'get181',
        '_1_8_2' => 'get182',
        'time_stamp' => 'getTimeStamp',
        '_processing_time' => 'getProcessingTime',
        'co2_g_standard' => 'getCo2GStandard',
        'co2_g_oekostrom' => 'getCo2GOekostrom',
        'ttl' => 'getTtl',
        'credits' => 'getCredits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account'] = $data['account'] ?? null;
        $this->container['_1_8_0'] = $data['_1_8_0'] ?? null;
        $this->container['_1_8_1'] = $data['_1_8_1'] ?? null;
        $this->container['_1_8_2'] = $data['_1_8_2'] ?? null;
        $this->container['time_stamp'] = $data['time_stamp'] ?? null;
        $this->container['_processing_time'] = $data['_processing_time'] ?? null;
        $this->container['co2_g_standard'] = $data['co2_g_standard'] ?? null;
        $this->container['co2_g_oekostrom'] = $data['co2_g_oekostrom'] ?? null;
        $this->container['ttl'] = $data['ttl'] ?? null;
        $this->container['credits'] = $data['credits'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account
     *
     * @return string|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string|null $account Stromkonto/Metering address allocated (this is not the MELOID!)
     *
     * @return self
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets _1_8_0
     *
     * @return int|null
     */
    public function get180()
    {
        return $this->container['_1_8_0'];
    }

    /**
     * Sets _1_8_0
     *
     * @param int|null $_1_8_0 Reading as provided as input in Wh
     *
     * @return self
     */
    public function set180($_1_8_0)
    {
        $this->container['_1_8_0'] = $_1_8_0;

        return $this;
    }

    /**
     * Gets _1_8_1
     *
     * @return int|null
     */
    public function get181()
    {
        return $this->container['_1_8_1'];
    }

    /**
     * Sets _1_8_1
     *
     * @param int|null $_1_8_1 Green energy calculated using Green Power Index (GrünstromIndex) in Wh
     *
     * @return self
     */
    public function set181($_1_8_1)
    {
        $this->container['_1_8_1'] = $_1_8_1;

        return $this;
    }

    /**
     * Gets _1_8_2
     *
     * @return int|null
     */
    public function get182()
    {
        return $this->container['_1_8_2'];
    }

    /**
     * Sets _1_8_2
     *
     * @param int|null $_1_8_2 Grey energy calculated using Green Power Index (GrünstromIndex) in Wh
     *
     * @return self
     */
    public function set182($_1_8_2)
    {
        $this->container['_1_8_2'] = $_1_8_2;

        return $this;
    }

    /**
     * Gets time_stamp
     *
     * @return int|null
     */
    public function getTimeStamp()
    {
        return $this->container['time_stamp'];
    }

    /**
     * Sets time_stamp
     *
     * @param int|null $time_stamp API Consensus time this reading was fully received
     *
     * @return self
     */
    public function setTimeStamp($time_stamp)
    {
        $this->container['time_stamp'] = $time_stamp;

        return $this;
    }

    /**
     * Gets _processing_time
     *
     * @return int|null
     */
    public function getProcessingTime()
    {
        return $this->container['_processing_time'];
    }

    /**
     * Sets _processing_time
     *
     * @param int|null $_processing_time Time this reading got imported into consensus (e.q. signed timestamp).
     *
     * @return self
     */
    public function setProcessingTime($_processing_time)
    {
        $this->container['_processing_time'] = $_processing_time;

        return $this;
    }

    /**
     * Gets co2_g_standard
     *
     * @return int|null
     */
    public function getCo2GStandard()
    {
        return $this->container['co2_g_standard'];
    }

    /**
     * Sets co2_g_standard
     *
     * @param int|null $co2_g_standard CO2 Emission of metered energy in a standard mix
     *
     * @return self
     */
    public function setCo2GStandard($co2_g_standard)
    {
        $this->container['co2_g_standard'] = $co2_g_standard;

        return $this;
    }

    /**
     * Gets co2_g_oekostrom
     *
     * @return int|null
     */
    public function getCo2GOekostrom()
    {
        return $this->container['co2_g_oekostrom'];
    }

    /**
     * Sets co2_g_oekostrom
     *
     * @param int|null $co2_g_oekostrom CO2 Emission of metered energy in a green energy mix (e.q. Ökostromtarif)
     *
     * @return self
     */
    public function setCo2GOekostrom($co2_g_oekostrom)
    {
        $this->container['co2_g_oekostrom'] = $co2_g_oekostrom;

        return $this;
    }

    /**
     * Gets ttl
     *
     * @return int|null
     */
    public function getTtl()
    {
        return $this->container['ttl'];
    }

    /**
     * Sets ttl
     *
     * @param int|null $ttl Time to Live for this reader. If no update is provided it gets decommissioned.
     *
     * @return self
     */
    public function setTtl($ttl)
    {
        $this->container['ttl'] = $ttl;

        return $this;
    }

    /**
     * Gets credits
     *
     * @return mixed|null
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     *
     * @param mixed|null $credits Update credits this meter has. Gets refilled automtically to prevent too frequent updates
     *
     * @return self
     */
    public function setCredits($credits)
    {
        $this->container['credits'] = $credits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


