"""
    Corrently.io

    *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: dev@stromdao.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.componentsh0 import Componentsh0
from openapi_client.model.tariffh0 import Tariffh0


class TariffPriceAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __tariff_slph0(
            self,
            **kwargs
        ):
            """Energy Tariff information  # noqa: E501

            Provides pricing data for private households with standard load profiles (Standardlastprofil H0).   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.tariff_slph0(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                zipcode (str): Zipcode (Postzleitzahl) of a city in Germany.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Tariffh0]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.tariff_slph0 = _Endpoint(
            settings={
                'response_type': ([Tariffh0],),
                'auth': [],
                'endpoint_path': '/tariff/slph0',
                'operation_id': 'tariff_slph0',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'zipcode',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'zipcode':
                        (str,),
                },
                'attribute_map': {
                    'zipcode': 'zipcode',
                },
                'location_map': {
                    'zipcode': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__tariff_slph0
        )

        def __tariffcomponents(
            self,
            **kwargs
        ):
            """Energy Tariff price components  # noqa: E501

            Provides insides into the different cost components of energy for a private household. Sample Request: https://api.corrently.io/v2.0/tariff/components?email=demo%40corrently.io&zip=69168&kwha=3300   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.tariffcomponents(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                zipcode (str): Zipcode (Postzleitzahl) of a city in Germany.. [optional]
                email (str): Valid email address to assign request to (pre offer generation). Ensure GDPR (DSGVO) at any time. [optional]
                kwha (int): Total amount of energy in kilo-watt-hours per year. (sample 2100). [optional]
                milliseconds (int): If provided all results will be scaled to this timeframe. [optional]
                wh (int): If provided together with milliseconds, a cost component stament for a particular event (like charging a car) will be created.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Componentsh0
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.tariffcomponents = _Endpoint(
            settings={
                'response_type': (Componentsh0,),
                'auth': [],
                'endpoint_path': '/tariff/components',
                'operation_id': 'tariffcomponents',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'zipcode',
                    'email',
                    'kwha',
                    'milliseconds',
                    'wh',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'zipcode':
                        (str,),
                    'email':
                        (str,),
                    'kwha':
                        (int,),
                    'milliseconds':
                        (int,),
                    'wh':
                        (int,),
                },
                'attribute_map': {
                    'zipcode': 'zipcode',
                    'email': 'email',
                    'kwha': 'kwha',
                    'milliseconds': 'milliseconds',
                    'wh': 'wh',
                },
                'location_map': {
                    'zipcode': 'query',
                    'email': 'query',
                    'kwha': 'query',
                    'milliseconds': 'query',
                    'wh': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__tariffcomponents
        )
